1.第一题
给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。

你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。

示例:

给定 nums = [2, 7, 11, 15], target = 9

因为 nums[0] + nums[1] = 2 + 7 = 9
所以返回 [0, 1]
第一种解法：暴力法
参考代码：
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* twoSum(int* nums, int numsSize, int target, int* returnSize){
    static int res[2] = {0}; // 创建一个包含2个int类型变量的数组并初始化
    *returnSize = 0; // 这个参数我查看了评论发现它的含义可能是你找到没找到这两个数值
    for(int i = 0;i < numsSize; i++) // 双层for循环遍历所有可能
    {
        for(int j = i + 1;j < numsSize; j++) // 此处j的初始状态根据i的值变化
        {
            if(target == nums[i] + nums[j]) // 判断是否为我们需要找的那两个数
            {
                res[0] = i; // 将我们找到的这两个数按照前后顺序放入数组中
                res[1] = j;
                *returnSize = 2; // 固定格式 必须等于2才对 无需关心
                   return res; // 对应函数的返回类型
            }
        }
    }
    return 0; // 如果没有找到就返回0 

}

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/two-sum
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
